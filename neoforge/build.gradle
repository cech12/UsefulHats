plugins {
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.150'
    id 'java-library'
}
base {
    archivesName = "${mod_id}-neoforge"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
    minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
    configureEach {
        modSource project.sourceSets.main
        //modSource project.sourceSets.test
    }
    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    //for Lucent
    maven {
        name "Modding Legacy Maven"
        url "https://maven.moddinglegacy.com/artifactory/modding-legacy/"
    }
    //for Baubles 2
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"
    compileOnly project(":common")
    testCompileOnly project(":common")

    implementation("curse.maven:baubles2-1040353:${project.baubles2_file_id}")

    //compileOnly("com.legacy:lucent:${project.lucent_version}")
    //runtimeOnly("com.legacy:lucent:${project.lucent_version}")
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":common").sourceSets.main.allSource)
}

//tasks.withType(Javadoc).matching(notNeoTask).configureEach {
//    options.tags = [ "reason" ]
//    source(project(":common").sourceSets.main.allJava)
//}

//tasks.named("sourcesJar", Jar) {
//    from(project(":common").sourceSets.main.allSource)
//}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
    from project(":common").sourceSets.main.resources
}

//disable tests
test.onlyIf { false }
tasks.configureEach { task ->
    if (task.name.startsWith("testJunit")) {
        task.enabled = false
    }
}
