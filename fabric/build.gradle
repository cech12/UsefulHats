plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '[1.6.6,1.7)'
}
base {
    archivesName = "${mod_id}-fabric"
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" } //modmenu & trinkets
    maven { url "https://maven.ladysnake.org/releases" } //trinkets
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation("com.terraformersmc:modmenu:${mod_menu_version}")

    //modImplementation("dev.emi:trinkets:${trinkets_version}")

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    compileOnly project(":common")
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
//tasks.withType(Javadoc).configureEach {
//    source(project(":common").sourceSets.main.allJava)
//}
//tasks.named("sourcesJar", Jar) {
//    from(project(":common").sourceSets.main.allSource)
//}

processResources {
    from project(":common").sourceSets.main.resources
}
